функция пример1(?аргумент1, ?аргумент2) {
    свойство => ?переменная2;
    фрейм (наименование."объект");
#, свойство.абстрактный  
    фрейм (наименование."фрейм3", сущность.объект);  
    фрейм (наименование."фрейм2", сущность.объект, элемент-класс.фрейм3);  
    фрейм (наименование."фрейм1", сущность.объект, элемент-класс.фрейм2);  
#   находит все фреймы у которых есть отношение "тип_отношения" и добавляет список отношений со значениями
#    (наименование."объект"):(свойство.абстрактный, сущность.отношение);
    (сущность.объект):(?переменная2.экземпляр);
#    (слот:тип_отношения):(свойство.абстрактный, сущность.отношение);
#    (слот:?аргумент1):(свойство.абстрактный, сущность.отношение);
#    (слот:тип_отношения."Предикаты отношения, связи (действия или состояния):"):(свойство.абстрактный, сущность.отношение);
#    (слот:?аргумент1."Предикаты отношения, связи (действия или состояния):"):(свойство.абстрактный, сущность.отношение);
#    (слот:?аргумент1.?аргумент2):(свойство.абстрактный, сущность.отношение);
#   находит фреймы или фрейм и присваивает результат поиска переменной
#    (сущность.объект) => ?результат2;
#   находит фрейм или фреймы с помощью конструктора из переменных и результат присваивает в переменную
#    (слот:?переменная1.?аргумент2, 
#                    слот:?переменная1) => ?результат1;
#   получает список слотов у фрейма
#    [слот:?переменная1.?переменная2] => ?результат2;
#    (наименование:красная_пирамида)% => ?результат3;
#    (сущность.объект)? элемент_класс => ?результат4;
#    печатать(?результат2);
#
#   цикл по списку фреймов
#    для каждого (отношение."объект активного воздействия, или контрагент") => ?переменная3 {
#    для каждого (сущность.объект) => ?переменная3 {
#        печатать(?переменная3);
#    };
#   если
#    если (?результат2 == test) {
#        печатать(?результат2);
#        печатать(?аргумент1);
#        продолжить;
#    };
};



